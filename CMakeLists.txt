#
# project: fips-soloud
#
if (NOT FIPS_IMPORT)
    cmake_minimum_required(VERSION 2.8)
    get_filename_component(FIPS_ROOT_DIR "../fips" ABSOLUTE)
    include("${FIPS_ROOT_DIR}/cmake/fips.cmake")
    fips_setup()
    fips_project(fips-soloud)
endif()

# default option values
set(soloud_winmm_default 0)
set(soloud_wasapi_default 0)
set(soloud_xaudio2_default 0)
set(soloud_coreaudio_default 0)
set(soloud_openal_default 0)
set(soloud_opensles_default 0)
set(soloud_alsa_default 0)
set(soloud_sdlstatic_default 0)
set(soloud_tools_default 0)
set(soloud_null_default 0)
if (FIPS_WINDOWS)
    set(soloud_winmm_default 1)
endif()
if (FIPS_OSX)
    set(soloud_coreaudio_default 1)
endif()
if (FIPS_EMSCRIPTEN)
    set(soloud_sdlstatic_default 1)
elseif (FIPS_PNACL)
    set(soloud_null_default 1)
elseif (FIPS_ANDROID)
    set(soloud_opensles_default 1)
elseif (FIPS_LINUX)
    set(soloud_alsa_default 1)
endif()
if (FIPS_PNACL)
    set(soloud_openmpt_default 0)
else()
    set(soloud_openmpt_default 1)
endif()
if (NOT FIPS_IMPORT)
    set(soloud_tools_default 1)
endif()

# backend options
option(SOLOUD_SDL "Compile soloud with SDL backend" OFF)
option(SOLOUD_SDL_STATIC "Compile soloud with static SDL backend" ${soloud_sdlstatic_default})
option(SOLOUD_SDL2_STATIC "Compile soloud with static SDL2 backend" OFF)
option(SOLOUD_PORTAUDIO "Compile soloud with PortAudio backend" OFF)
option(SOLOUD_OPENAL "Compile soloud with OpenAL backend" ${soloud_openal_default})
option(SOLOUD_OPENSLES "Compile soloud with OpenSLES backend" ${soloud_opensles_default})
option(SOLOUD_XAUDIO2 "Compile soloud with XAudio2 backend" ${soloud_xaudio2_default})
option(SOLOUD_WINMM "Compile soloud with WinMM backend" ${soloud_winmm_default})
option(SOLOUD_WASAPI "Compile soloud with WASAPI backend" ${soloud_wasapi_default})
option(SOLOUD_ALSA "Compile soloud with ALSA backend" ${soloud_alsa_default})
option(SOLOUD_OSS "Compile soloud with OSS backend" OFF)
option(SOLOUD_COREAUDIO "Compile soloud with CoreAudio backend" ${soloud_coreaudio_default})
option(SOLOUD_NULL "Compile soloud with NULL backend" ${soloud_null_default})
option(SOLOUD_LIBOPENMPT "Add libopenmpt support to soloud" ${soloud_openmpt_default})
option(SOLOUD_PORTMIDI "Add portmidi support to soloud" OFF)
option(SOLOUD_TOOLS "Compile soloud tools" ${soloud_tools_default})

fips_begin_module(soloud)
    if (SOLOUD_LIBOPENMPT)
        fips_src(soloud/src/audiosource/openmpt EXCEPT *.c GROUP audiosource)
    endif()
    fips_src(soloud/src/audiosource/monotone GROUP audiosource)
    fips_src(soloud/src/audiosource/sfxr GROUP audiosource)
    fips_src(soloud/src/audiosource/speech GROUP audiosource)
    fips_src(soloud/src/audiosource/tedsid GROUP audiosource)
    fips_src(soloud/src/audiosource/vic GROUP audiosource)
    fips_src(soloud/src/audiosource/wav GROUP audiosource)
    fips_src(soloud/src/filter GROUP filter)
    fips_src(soloud/src/core GROUP core)
    fips_src(soloud/include GROUP include)
    if (SOLOUD_OPENAL) 
        fips_src(soloud/src/backend/openal GROUP openal)
    endif()
    if (SOLOUD_OPENSLES)
        fips_src(soloud/src/backend/opensles GROUP opensles)
        fips_libs(OpenSLES)
    endif()
    if (SOLOUD_ALSA)
        fips_src(soloud/src/backend/alsa GROUP alsa)
        fips_libs(asound)
    endif()
    if (SOLOUD_OSS)
        fips_src(soloud/src/backend/oss GROUP oss)
    endif()
    if (SOLOUD_COREAUDIO)
        fips_src(soloud/src/backend/coreaudio GROUP coreaudio)
        fips_frameworks_osx(AudioToolbox)
    endif()
    if (SOLOUD_PORTAUDIO)
        fips_src(soloud/src/backend/portaudio GROUP portaudio)
    endif()
    if (SOLOUD_SDL)
        fips_src(soloud/src/backend/sdl GROUP sdl)
    endif()
    if (SOLOUD_SDL_STATIC)
        fips_src(soloud/src/backend/sdl_static GROUP sdl_static)
    endif()
    if (SOLOUD_SDL2_STATIC)
        fips_src(soloud/src/backend/sdl2_static GROUP sdl2_static)
    endif()
    if (SOLOUD_WASAPI)
        fips_src(soloud/src/backend/wasapi GROUP wasapi)
    endif()
    if (SOLOUD_XAUDIO2)
        fips_src(soloud/src/backend/xaudio2 GROUP xaudio2)
    endif()
    if (SOLOUD_WINMM)
        fips_src(soloud/src/backend/winmm GROUP winmm)
    endif()
    if (SOLOUD_NULL)
        fips_src(soloud/src/backend/null GROUP null)
    endif()
fips_end_module()
target_include_directories(soloud PUBLIC soloud/include)

# configuration defines need only be visible in the implementation files
if (SOLOUD_OPENAL) 
    target_compile_definitions(soloud PRIVATE WITH_OPENAL=1)
endif()
if (SOLOUD_OPENSLES)
    target_compile_definitions(soloud PRIVATE WITH_OPENSLES=1)
endif()
if (SOLOUD_ALSA)
    target_compile_definitions(soloud PRIVATE WITH_ALSA=1)
endif()
if (SOLOUD_OSS)
    target_compile_definitions(soloud PRIVATE WITH_OSS=1)
endif()
if (SOLOUD_COREAUDIO)
    target_compile_definitions(soloud PRIVATE WITH_COREAUDIO=1)
endif()
if (SOLOUD_PORTAUDIO)
    target_compile_definitions(soloud PRIVATE WITH_PORTAUDIO=1)
endif()
if (SOLOUD_SDL)
    target_compile_definitions(soloud PRIVATE WITH_SDL=1)
endif()
if (SOLOUD_SDL_STATIC)
    target_compile_definitions(soloud PRIVATE WITH_SDL_STATIC=1)
endif()
if (SOLOUD_SDL2_STATIC)
    target_compile_definitions(soloud PRIVATE WITH_SDL2_STATIC=1)
endif()
if (SOLOUD_WASAPI)
    target_compile_definitions(soloud PRIVATE WITH_WASAPI=1)
endif()
if (SOLOUD_XAUDIO2)
    target_compile_definitions(soloud PRIVATE WITH_XAUDIO2=1)
endif()
if (SOLOUD_WINMM)
    target_compile_definitions(soloud PRIVATE WITH_WINMM=1)
endif()
if (SOLOUD_NULL)
    target_compile_definitions(soloud PRIVATE WITH_NULL=1)
endif()
if (SOLOUD_LIBOPENMPT)
    target_compile_definitions(soloud PRIVATE WITH_OPENMPT=1)
endif()

if (SOLOUD_TOOLS)
    # some tools need C++ exceptions enabled
    set(FIPS_EXCEPTIONS ON CACHE BOOL "Enable C++ exceptions" FORCE)
    fips_ide_group(demos)
    fips_begin_app(simplest cmdline)
        fips_src(soloud/demos/simplest GROUP .)
        fips_deps(soloud)
    fips_end_app()
    fips_begin_app(welcome cmdline)
        fips_src(soloud/demos/welcome GROUP .)
        fips_deps(soloud)
    fips_end_app()
    fips_begin_app(nulldemo cmdline)
        fips_src(soloud/demos/null GROUP .)
        fips_deps(soloud)
    fips_end_app()
    fips_begin_app(enumerate cmdline)
        fips_src(soloud/demos/enumerate GROUP .)
        fips_deps(soloud)
    fips_end_app()
    fips_begin_app(c_test cmdline)
        fips_src(soloud/demos/c_test GROUP .)
        fips_src(soloud/src/c_api GROUP .)
        fips_deps(soloud)
    fips_end_app()
endif()

set(args)
if (FIPS_CLANG)
    set(args -Wno-unused-function -Wno-unused-private-field -Wno-dangling-else -Wno-missing-braces -Wno-unused-value -Wno-parentheses -Wno-sign-compare -Wno-unused-variable -Wno-deprecated-register -Wno-writable-strings -Wno-reorder -Wno-delete-non-virtual-dtor -Wno-deprecated-register -Wno-missing-braces -Wno-unused-function -Wno-unused-variable)
elseif (FIPS_GCC)
    set(args -Wno-unused-function -Wno-missing-braces -Wno-unused-value -Wno-parentheses -Wno-sign-compare -Wno-unused-variable -Wno-reorder -Wno-delete-non-virtual-dtor -Wno-maybe-uninitialized -Wno-unused-but-set-variable -Wno-unused-result)
elseif (FIPS_WINDOWS)
    # 4814: he file contains a character that cannot be represented in the current code page...
    set(args /wd4819)
elseif (FIPS_UWP)
    # 4146: unary minus operator applied to unsigned type, result still unsigned
    # 4244: conversion from __int64 to int, possible loss of data
    set(args /wd4146 /wd4244)
endif()
if (args)
    target_compile_options(soloud PRIVATE ${args})
    if (SOLOUD_TOOLS)
        target_compile_options(enumerate PRIVATE ${args})
        target_compile_options(c_test PRIVATE ${args})
    endif()
endif()

if (NOT FIPS_IMPORT)
    fips_finish()
endif()
